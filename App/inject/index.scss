$prefix: 'bx-dev';
$carbonPrefix: 'bx';

@import '@carbon/type/scss/type';
@import '@carbon/type/scss/styles';
@import '@carbon/type/scss/font-face/mono';

@include carbon--type-reset();
@include carbon--font-face-mono();

@import '~@carbon/grid/scss/prefix';
@import "~@carbon/layout/scss/breakpoint";
@import "~@carbon/layout/scss/mini-unit";
@import "~@carbon/grid/scss/grid";
@import "~@carbon/colors/scss/colors";
@import "~@carbon/themes/scss/themes";
@import "~@carbon/motion/scss/motion";
@import "carbon-components/src/globals/scss/motion";

$transition-in: $duration--moderate-02 carbon--motion(standard, productive);
$transition-fade: $duration--fast-02 carbon--motion(standard, productive);

$grid-color: map-get(map-get($carbon--colors, 'blue'), 60);
$grid-opacity: .5;
$grid-border-size: 1px;
$grid-border-color: $grid-color;
$grid-border-opacity: 1;

$grid-inner-color: $grid-color;
$grid-inner-opacity: $grid-opacity;
$grid-inner-border-size: $grid-border-size;
$grid-inner-border-color: $grid-border-color;
$grid-inner-border-opacity: $grid-border-opacity;

$grid-outer-color: $grid-color;
$grid-outer-opacity: $grid-inner-opacity / 2;
$grid-outer-border-size: $grid-border-size;
$grid-outer-border-color: $grid-border-color;
$grid-outer-border-opacity: $grid-border-opacity;

$grid-mini-unit-color: $grid-color;
$grid-mini-unit-opacity: $grid-color;
$grid-mini-unit-border-size: $grid-border-size;
$grid-mini-unit-border-color: $grid-border-color;
$grid-mini-unit-border-opacity: $grid-opacity;


body {
    position: relative;
    
    // mini unit grid
    &::after {
        content: '';
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        height: auto;
        min-height: 100vh;
        width: auto;
        display: block;
        pointer-events: none;
        z-index: 999999999;

        background-attachment: scroll;

        background-size: carbon--mini-units(1) carbon--mini-units(1);
        background-image:
        linear-gradient(to right, rgba($grid-mini-unit-border-color, $grid-mini-unit-border-opacity) $grid-mini-unit-border-size, transparent $grid-mini-unit-border-size),
        linear-gradient(to bottom, rgba($grid-mini-unit-border-color, $grid-mini-unit-border-opacity) $grid-mini-unit-border-size, transparent $grid-mini-unit-border-size);

        opacity: 0;
        transition: opacity $transition-fade;
    }

    .#{$prefix}--grid--fixed &::after {
        background-attachment: fixed;
    }

    .#{$prefix}--grid--mini-unit &::after {
        opacity: 1;
    }

    .#{$prefix}--grid--hide &,
    html:active &,
    &:active {
        &::after {
            opacity: 0;
        }
    }
}

// 2x grid
.#{$prefix}--grid {

    &-overlay {
        width: 100%;
        position: fixed;
        left: 0;
        top: 0;
        z-index: 9999999999;
        
        &,
        .#{$prefix}--grid,
        .#{$prefix}--row,
        [class*="#{$prefix}--col-"],
        [class*="#{$prefix}--col-"]::before {
            height: 100vh;
            transition: height $transition-in;
            
            .#{$prefix}--grid--hide & {
                height: 0;
                top: auto;
                bottom: 0;
            }
        }
    }

    &-container {
        position: absolute;
        z-index: 9999999999;
        height: auto;
        width: auto;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        
        pointer-events: none;
        opacity: 1;
        transition: opacity $transition-fade;

        * {
          box-sizing: border-box;
        }

        html:active &,
        body:active & {
            opacity: 0;
        }
        
        // breakpoint label
        &::after {
            @include carbon--theme($carbon--theme--g90) {
                @include carbon--type-style('code-01');
                @include carbon--font-family('mono');

                position: fixed;
                background: $ui-background;
                padding: carbon--mini-units(1) ($carbon--grid-gutter / 2);
                color: $text-01;
                right: 0;
                z-index: 9999999999;
                transition: bottom $transition-in;

                .#{$prefix}--grid--breakpoint-label & {
                    bottom: 0;
                }
                
                &,
                .#{$prefix}--grid--hide & {
                    bottom: -32px;
                }
                
                @include carbon--breakpoint('sm') {
                    content: 'Breakpoint: Small';
                }
                
                @include carbon--breakpoint('md') {
                    content: 'Breakpoint: Medium';
                }
                
                @include carbon--breakpoint('lg') {
                    content: 'Breakpoint: Large';
                }
                
                @include carbon--breakpoint('xlg') {
                    content: 'Breakpoint: X-Large';
                }
                
                @include carbon--breakpoint('max') {
                    content: 'Breakpoint: Max';
                }
            }
        }

        [class*="#{$prefix}--col-"] {
            &,
            &::before {
                transition:
                    height $transition-in,
                    box-shadow $transition-in,
                    background-color $transition-fade;
            }

            &::before {
                content: '';
                display: block;
            }
        }

        // column
        &.#{$prefix}--grid--inner {
            [class*="#{$prefix}--col-"]::before {
                background-color: rgba($grid-inner-color, $grid-inner-opacity);
            }
        }
        &:not(#{$prefix}--grid--inner) {
            [class*="#{$prefix}--col-"]::before {
                background-color: rgba($grid-inner-color, 0);
            }
        }

        // gutter
        &.#{$prefix}--grid--outer {
            [class*="#{$prefix}--col-"] {
                &::before {
                    box-shadow:
                        $carbon--grid-gutter/2 0 0 rgba($grid-outer-color, $grid-outer-opacity),
                        ($carbon--grid-gutter/2 * -1) 0 0 rgba($grid-outer-color, $grid-outer-opacity);
                }
            }
        }

        // column border
        &.#{$prefix}--grid--inner-border {
            [class*="#{$prefix}--col-"] {
                &::before {
                    box-shadow:
                        $grid-inner-border-size 0 0 rgba($grid-inner-border-color, $grid-inner-border-opacity),
                        ($grid-inner-border-size * -1) 0 0 rgba($grid-inner-border-color, $grid-inner-border-opacity);
                }
            }
        }

        // gutter + column border
        &.#{$prefix}--grid--outer.#{$prefix}--grid--inner-border {
            [class*="#{$prefix}--col-"] {
                &::before {
                    box-shadow:
                        $carbon--grid-gutter/2 0 0 rgba($grid-outer-color, $grid-outer-opacity),
                        ($carbon--grid-gutter/2 * -1) 0 0 rgba($grid-outer-color, $grid-outer-opacity),
                        $grid-inner-border-size 0 0 rgba($grid-inner-border-color, $grid-inner-border-opacity),
                        ($grid-inner-border-size * -1) 0 0 rgba($grid-inner-border-color, $grid-inner-border-opacity);
                }
            }
        }

        // gutter divider
        &.#{$prefix}--grid--outer-border {
            [class*="#{$prefix}--col-"] {
                box-shadow: $grid-outer-border-size 0 0 rgba($grid-outer-border-color, $grid-outer-border-opacity);
                
                &:first-child {
                    box-shadow: $grid-outer-border-size 0 0 rgba($grid-outer-border-color, $grid-outer-border-opacity),
                    ($grid-outer-border-size * -1) 0 0 rgba($grid-outer-border-color, $grid-outer-border-opacity);
                }
            }
        }
    }
}


// column hover identifier
.#{$carbonPrefix}--grid {
    [class*="#{$carbonPrefix}--col"] {
        $padding: carbon--mini-units(1);
        $height: carbon--mini-units(4) - ($padding * 2);

        position: relative;
        z-index: 99;
        transition: box-shadow $transition-fade;
        
        // border base
        &::before {
            content: '';
            display: block;
            height: 100%;
            width: 100%;
            left: 0;
            top: 0;
            position: absolute;
            min-height: $height + ($padding * 2);
            z-inde: 999;
            pointer-events: none;
        }
        
        // label base
        &::after {
            pointer-events: none;
            z-index: 999;
            position: absolute;
            left: 0;
            top: 0;
            height: 0;
            overflow: hidden;
            transition: height $transition-fade, padding $transition-fade;

            @include carbon--type-style('code-01');
            @include carbon--font-family('mono');

            background: rgba($grid-inner-border-color, 1);
            color: $text-04;
            padding: 0 ($carbon--grid-gutter / 2);
        }

        // label transition
        .#{$prefix}--grid--hover &:hover {
            &::after {
                height: $height;
                padding-top: $padding;
                padding-bottom: $padding;
            }
        }

        .#{$prefix}--grid--hide &:hover {
            &::after {
                height: 0;
                padding: 0;
            }
        }
    }

    // border definition
    .#{$prefix}--grid--hover & {
        [class*="bx--col"]:hover::before {
            box-shadow: 0 0 0 $grid-inner-border-size rgba($grid-inner-border-color, $grid-inner-border-opacity);
        }
    }

    .#{$prefix}--grid--hide & {
        [class*="bx--col"]:hover::before {
            box-shadow: none;
        }
    }

    // label content
    .#{$carbonPrefix}--col {
        
        &::after { content: '.#{$carbonPrefix}--col'; }
        
        @each $size, $breakpoint in $carbon--grid-breakpoints {
            @include carbon--breakpoint($size) {
                &-#{$size} {
                    @for $i from 1 through map-get($breakpoint, 'columns') {
                        &-#{$i}::after { content: '.#{$carbonPrefix}--col-#{$size}-#{$i}'; }
                    }
                }
            }
        }
    }
}